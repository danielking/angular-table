(function() {
  angular.module('$angularTable', ['pasvaz.bindonce']);

}).call(this);

(function() {
  var angularTable;

  angularTable = angular.module('$angularTable');

  angularTable.directive('angularTable', function() {
    return {
      template: '<div class="angular-table">\n	<div class="angular-table-header" bindonce="config" bo-style="{\n				height: (config.headerHeight || 30) + \'px\',\n				\'line-height\': (config.headerHeight || 30) + \'px\'\n			}">\n		<div class="angular-table-cell angular-table-header-cell" bindonce ng-repeat="col in config.columns" bo-style="{\n					width: col.width ? (col.width + \'px\') : \'auto\',\n					\'min-width\': (col.minWidth || 100) + \'px\',\n					height: (config.headerHeight || 30) + \'px\',\n					\'line-height\': (config.headerHeight || 30) + \'px\',\n					\'text-align\': (col.align || \'center\')\n				}" bo-text="col.label" bo-class="col.width ? \'\' : \'flex\'">\n		</div>\n	</div>\n	<div class="angular-table-body">\n		<div class="angular-table-body-row" bindonce ng-repeat="item in config.data">\n			<div class="angular-table-cell angular-table-body-row-cell" bindonce ng-repeat="col in config.columns" bo-style="{\n						width: col.width ? (col.width + \'px\') : \'auto\',\n						\'min-width\': (col.minWidth || 100) + \'px\',\n						height: (config.rowHeight || 30) + \'px\',\n						\'line-height\': (config.rowHeight || 30) + \'px\',\n						\'text-align\': (col.align || \'center\')\n					}" bo-class="col.width ? \'\' : \'flex\'">\n				<div class="angular-table-body-row-cell-content" bo-text="col.formatter ? col.formatter(item[col.field]) : item[col.field]">\n				</div>\n			</div>\n		</div>\n	</div>\n</div>',
      replace: true,
      scope: {
        config: '=angularTable'
      },
      link: function(scope, element, attrs) {
        var bodyElement, headerElement;
        headerElement = element.find('.angular-table-header');
        bodyElement = element.find('.angular-table-body');
        return bodyElement.perfectScrollbar().scroll(function(evt) {
          return headerElement.scrollLeft($(this).scrollLeft());
        });
      }
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,