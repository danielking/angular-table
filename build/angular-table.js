(function() {
  angular.module('$angularTable', ['pasvaz.bindonce']);

}).call(this);

(function() {
  var angularTable;

  angularTable = angular.module('$angularTable');

  angularTable.directive('angularTableHeaderCell', function() {
    return {
      template: '<div class="angular-table-cell angular-table-header-cell" bindonce ng-style="{\n			width: col.width ? (col.width + \'px\') : \'auto\',\n			\'min-width\': (col.minWidth || 100) + \'px\',\n			height: (config.headerHeight || 30) + \'px\',\n			\'line-height\': (config.headerHeight || 30) + \'px\',\n			\'text-align\': (col.align || \'center\')\n		}" bo-class="{flex: !col.width, resizable: col.resizable}"\n		ng-mousedown="header.mousedown($event, part, $index)"\n		>\n	<div class="angular-table-header-cell-content" bo-text="col.label"></div>\n</div>',
      replace: true
    };
  });

  angularTable.directive('angularTableBodyColumn', function() {
    return {
      template: '<div class="angular-table-body-column" bindonce ng-style="{\n			width: col.width ? (col.width + \'px\') : \'auto\',\n			\'min-width\': (col.minWidth || 100) + \'px\'\n		}" bo-class="col.width ? \'\' : \'flex\'">\n	<div class="angular-table-cell angular-table-body-cell" bindonce ng-repeat="item in config.data"\n				bo-attr bo-attr-data-index="$index"\n				bo-class="$index == selected ? \'selected\' : \'\'"\n			>\n		<div bo-if="col.type!=\'actions\'" class="angular-table-body-cell-content" ng-style="{\n				height: (config.rowHeight || 30) + \'px\',\n				\'line-height\': (config.rowHeight || 30) + \'px\',\n				\'text-align\': (col.align || \'center\')\n			}"\n			bo-text="col.formatter ? col.formatter(item[col.field]) : item[col.field]">\n		</div>\n		<div bo-if="col.type==\'actions\'" class="angular-table-body-row-cell-content" bo-style="{\n				height: (config.rowHeight || 30) + \'px\',\n				\'line-height\': (config.rowHeight || 30) + \'px\',\n				\'text-align\': (col.align || \'center\')\n				}">\n			<span class="icon" bindonce ng-repeat="action in col.actions" bo-class="action.iconClass")\n		</div>\n	</div>\n</div>',
      replace: true
    };
  });

  angularTable.directive('angularTable', [
    '$timeout', function($timeout) {
      return {
        template: '<div class="angular-table">\n	<div class="angular-table-header" bindonce="config" ng-style="{\n				height: (config.headerHeight || 30) + \'px\',\n				\'line-height\': (config.headerHeight || 30) + \'px\'\n			}">\n		<div bo-class="\'angular-table-header-\' + part" bindonce ng-repeat="part in [\'left\', \'center\', \'right\']">\n			<div angular-table-header-cell ng-repeat="col in config.columns[part]"></div>\n		</div>\n	</div>\n\n	<div class="angular-table-body">\n		<div bo-class="\'angular-table-body-\' + part" bindonce ng-repeat="part in [\'left\', \'center\', \'right\']">\n			<div angular-table-body-column ng-repeat="col in config.columns[part]"></div>\n		</div>\n	</div>\n</div>',
        replace: true,
        scope: {
          config: '=angularTable'
        },
        link: function(scope, element, attrs) {
          var resizing;
          $timeout(function() {
            var bodyCenter, headerCenter;
            element.on('mouseenter', '.angular-table-body-cell', function() {
              var index;
              index = $(this).data('index');
              return element.find(".angular-table-body-cell[data-index=" + index + "]").addClass('hover');
            });
            element.on('mouseleave', '.angular-table-body-cell', function() {
              var index;
              index = $(this).data('index');
              return element.find(".angular-table-body-cell[data-index=" + index + "]").removeClass('hover');
            });
            headerCenter = element.find('.angular-table-header-center');
            bodyCenter = element.find('.angular-table-body-center');
            return bodyCenter.perfectScrollbar().scroll(function(event) {
              var siblings;
              siblings = $(this).siblings();
              siblings.scrollTop($(this).scrollTop());
              return headerCenter.scrollLeft($(this).scrollLeft());
            });
          }, 0);
          resizing = null;
          scope.selected = -1;
          scope.$on('resizing', function(_event, resizing) {
            var onmousemove;
            onmousemove = function(event) {
              var newWidth;
              newWidth = resizing.width - resizing.start + event.screenX;
              if (newWidth < 30) {
                newWidth = 30;
              }
              return resizing.element.outerWidth(newWidth);
            };
            $(window).on('mousemove', onmousemove);
            return $(window).one('mouseup', function(event) {
              var col, newWidth;
              resizing.element.removeClass('resizing');
              $(window).off('mousemove', onmousemove);
              newWidth = resizing.width - resizing.start + event.screenX;
              if (newWidth < 30) {
                newWidth = 30;
              }
              col = angular.copy(scope.config.columns[resizing.part][resizing.index]);
              col.width = newWidth;
              scope.config.columns[resizing.part][resizing.index] = col;
              return $timeout(function() {
                return scope.$digest();
              });
            });
          });
          return scope.header = {
            mousedown: function(event, part, index) {
              element = $(event.target);
              if (!scope.config.columns[part][index].resizable || element.is('.angular-table-header-cell-content') || part === 'right' && index === scope.config.columns[part].length - 1) {
                return;
              }
              resizing = {
                part: part,
                index: index,
                start: event.screenX,
                element: element,
                width: element.outerWidth()
              };
              element.addClass('resizing');
              return scope.$broadcast('resizing', resizing);
            }
          };
        }
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uY29mZmVlIiwiZGlyZWN0aXZlcy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxFQUFBLE9BQU8sQ0FBQyxNQUFSLENBQWUsZUFBZixFQUFnQyxDQUFDLGlCQUFELENBQWhDLENBQUEsQ0FBQTtBQUFBOzs7QUNBQTtBQUFBLE1BQUEsWUFBQTs7QUFBQSxFQUFBLFlBQUEsR0FBZSxPQUFPLENBQUMsTUFBUixDQUFlLGVBQWYsQ0FBZixDQUFBOztBQUFBLEVBRUEsWUFBWSxDQUFDLFNBQWIsQ0FBdUIsd0JBQXZCLEVBQWlELFNBQUEsR0FBQTtXQUNoRDtBQUFBLE1BQUEsUUFBQSxFQUFVLHNpQkFBVjtBQUFBLE1BYUEsT0FBQSxFQUFTLElBYlQ7TUFEZ0Q7RUFBQSxDQUFqRCxDQUZBLENBQUE7O0FBQUEsRUFrQkEsWUFBWSxDQUFDLFNBQWIsQ0FBdUIsd0JBQXZCLEVBQWlELFNBQUEsR0FBQTtXQUNoRDtBQUFBLE1BQUEsUUFBQSxFQUFVLDRtQ0FBVjtBQUFBLE1BMEJBLE9BQUEsRUFBUyxJQTFCVDtNQURnRDtFQUFBLENBQWpELENBbEJBLENBQUE7O0FBQUEsRUErQ0EsWUFBWSxDQUFDLFNBQWIsQ0FBdUIsY0FBdkIsRUFBdUM7SUFDdEMsVUFEc0MsRUFFdEMsU0FBQyxRQUFELEdBQUE7YUFDQztBQUFBLFFBQUEsUUFBQSxFQUFVLGtyQkFBVjtBQUFBLFFBZ0JBLE9BQUEsRUFBUyxJQWhCVDtBQUFBLFFBaUJBLEtBQUEsRUFDQztBQUFBLFVBQUEsTUFBQSxFQUFRLGVBQVI7U0FsQkQ7QUFBQSxRQW1CQSxJQUFBLEVBQU0sU0FBQyxLQUFELEVBQVEsT0FBUixFQUFpQixLQUFqQixHQUFBO0FBQ0wsY0FBQSxRQUFBO0FBQUEsVUFBQSxRQUFBLENBQVMsU0FBQSxHQUFBO0FBQ1AsZ0JBQUEsd0JBQUE7QUFBQSxZQUFBLE9BQU8sQ0FBQyxFQUFSLENBQVcsWUFBWCxFQUF5QiwwQkFBekIsRUFBcUQsU0FBQSxHQUFBO0FBQ3BE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QSxFQUFPLE9BQU8sQ0FBQyxVQUFSLENBQUEsQ0FKUDtlQUpELENBQUE7QUFBQSxjQVNBLE9BQU8sQ0FBQyxRQUFSLENBQWlCLFVBQWpCLENBVEEsQ0FBQTtxQkFVQSxLQUFLLENBQUMsVUFBTixDQUFpQixVQUFqQixFQUE2QixRQUE3QixFQVhVO1lBQUEsQ0FBWDtZQXBESTtRQUFBLENBbkJOO1FBREQ7SUFBQSxDQUZzQztHQUF2QyxDQS9DQSxDQUFBO0FBQUEiLCJmaWxlIjoiYW5ndWxhci10YWJsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlICckYW5ndWxhclRhYmxlJywgWydwYXN2YXouYmluZG9uY2UnXVxyXG5cclxuIyBhbmd1bGFyLm1vZHVsZSgnJGFuZ3VsYXJUYWJsZS5jb25maWcnLCBbXSkudmFsdWUoJyRhbmd1bGFyVGFibGUuY29uZmlnJywge30pO1xyXG4jIGFuZ3VsYXIubW9kdWxlKCckYW5ndWxhclRhYmxlLmZpbHRlcnMnLCBbJyRhbmd1bGFyVGFibGUuY29uZmlnJ10pO1xyXG4jIGFuZ3VsYXIubW9kdWxlKCckYW5ndWxhclRhYmxlLmRpcmVjdGl2ZXMnLCBbJyRhbmd1bGFyVGFibGUuY29uZmlnJ10pO1xyXG4jIGFuZ3VsYXIubW9kdWxlKCckYW5ndWxhclRhYmxlJywgWyckYW5ndWxhclRhYmxlLmZpbHRlcnMnLCAnJGFuZ3VsYXJUYWJsZS5kaXJlY3RpdmVzJywgJyRhbmd1bGFyVGFibGUuY29uZmlnJ10pO1xyXG5cclxuIyBhbmd1bGFyLm1vZHVsZSgnJGFuZ3VsYXJUYWJsZS5kaXJlY3RpdmVzJykuZGlyZWN0aXZlICdhbmd1bGFyVGFibGUnLCAoKSAtPlxyXG4jIFx0dGVtcGxhdGU6ICcnJzxkaXYgY2xhc3M9XCJhbmd1bGFyLXRhYmxlXCIgbmctc3R5bGU9XCJ7aGVpZ2h0Om9wdGlvbnMuaGVpZ2h0KydweCcsIHdpZHRoOm9wdGlvbnMud2lkdGgrJ3B4J31cIj5cclxuIyBcdFx0XHQ8ZGl2IGNsYXNzPVwiYW5ndWxhci10YWJsZS1oZWFkZXJcIiBuZy1zdHlsZT1cIntoZWlnaHQ6IG9wdGlvbnMuaGVhZGVyLmhlaWdodCArICdweCcsIHdpZHRoOiBvcHRpb25zLndpZHRoICsgJ3B4J31cIj5cclxuIyBcdFx0XHRcdDxkaXYgYW5ndWxhci10YWJsZS1oZWFkZXItbGVmdD48L2Rpdj48ZGl2IGFuZ3VsYXItdGFibGUtaGVhZGVyLXJpZ2h0PjwvZGl2PlxyXG4jIFx0XHRcdDwvZGl2PlxyXG4jIFx0XHRcdDxkaXYgYW5ndWxhci10YWJsZS1jb2x1bW4tc2Nyb2xsZXI+PC9kaXY+XHJcbiMgXHRcdFx0PGRpdiBjbGFzcz1cImFuZ3VsYXItdGFibGUtYm9keVwiIG5nLXN0eWxlPVwie2hlaWdodDogKG9wdGlvbnMuaGVpZ2h0IC0gb3B0aW9ucy5oZWFkZXIuaGVpZ2h0IC0gc2Nyb2xsYmFyV2lkdGgpICsgJ3B4J31cIj5cclxuIyBcdFx0XHRcdDxkaXYgYW5ndWxhci10YWJsZS1ib2R5LWxlZnQ+PC9kaXY+PGRpdiBhbmd1bGFyLXRhYmxlLWJvZHktcmlnaHQ+PC9kaXY+XHJcbiMgXHRcdFx0PC9kaXY+XHJcbiMgXHRcdDwvZGl2PicnJ1xyXG4jIFx0cmVwbGFjZTogdHJ1ZVxyXG4jIFx0c2NvcGU6XHJcbiMgXHRcdHJvd3M6ICc9bmdNb2RlbCdcclxuIyBcdFx0Y29sdW1uczogJz1jb2x1bW5zJ1xyXG4jIFx0XHRvcHRpb25zOiAnPW9wdGlvbnMnXHJcbiMgXHRsaW5rOiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSAtPlxyXG4jIFx0XHRzZXRUaW1lb3V0IC0+XHJcbiMgXHRcdFx0c2NvcGUuJGFwcGx5IC0+XHJcbiMgXHRcdFx0XHRzY29wZS5zY3JvbGxiYXJXaWR0aCA9IDBcclxuIyBcdFx0XHRcdGNvbnNvbGUubG9nIHNjb3BlLm9wdGlvbnMuaGVpZ2h0IC0gc2NvcGUub3B0aW9ucy5oZWFkZXIuaGVpZ2h0IC0gc2NvcGUuc2Nyb2xsYmFyV2lkdGhcclxuIyBcdFx0XHQsMFxyXG4jIFx0XHRzY29wZS4kd2F0Y2ggJ2NvbHVtbnMnLCAoY29scykgLT5cclxuIyBcdFx0XHR3aWR0aExlZnQgPSAwXHJcbiMgXHRcdFx0d2lkdGhSaWdodCA9IDBcclxuIyBcdFx0XHRzY29wZS5jb2x1bW5zLmZvckVhY2ggKGNvbCkgLT5cclxuIyBcdFx0XHRcdGNvbC5maXhlZCA9ICEhY29sLmZpeGVkXHJcbiMgXHRcdFx0XHRjb2wud2lkdGggPSBjb2wud2lkdGggfHwgMTAwXHJcbiMgXHRcdFx0XHR3aWR0aExlZnQgKz0gY29sLndpZHRoIGlmIGNvbC5maXhlZFxyXG4jIFx0XHRcdFx0d2lkdGhSaWdodCArPSBjb2wud2lkdGggdW5sZXNzIGNvbC5maXhlZFxyXG4jIFx0XHRcdHNjb3BlLndpZHRoUmlnaHQgPSB3aWR0aFJpZ2h0XHJcbiMgXHRcdFx0c2NvcGUud2lkdGhMZWZ0ID0gd2lkdGhMZWZ0XHJcblxyXG4jIFx0XHRzY29wZS4kb24gJ2hzY3JvbGwnLCAoZXZ0LCBsZWZ0KSAtPlxyXG4jIFx0XHRcdHNjb3BlLiRicm9hZGNhc3QgJ2FkanVzdGhzY3JvbGwnLCBsZWZ0XHJcbiMgXHRcdHNjb3BlLiRvbiAndnNjcm9sbCcsIChldnQsIHRvcCkgLT5cclxuIyBcdFx0XHRzY29wZS4kYnJvYWRjYXN0ICdhZGp1c3R2c2Nyb2xsJywgdG9wXHJcblxyXG4jIGFuZ3VsYXIubW9kdWxlKCckYW5ndWxhclRhYmxlLmRpcmVjdGl2ZXMnKS5kaXJlY3RpdmUgJ2FuZ3VsYXJUYWJsZUhlYWRlckxlZnQnLCAoKSAtPlxyXG4jIFx0dGVtcGxhdGU6ICcnJzxkaXYgY2xhc3M9XCJhbmd1bGFyLXRhYmxlLWhlYWRlci1sZWZ0XCIgbmctc3R5bGU9XCJ7aGVpZ2h0OiAob3B0aW9ucy5oZWFkZXIuaGVpZ2h0LTEpICsgJ3B4J31cIj5cclxuIyBcdFx0XHQ8ZGl2IGFuZ3VsYXItdGFibGUtaGVhZGVyLWNlbGwgbmctcmVwZWF0PVwiY29sdW1uIGluIGNvbHVtbnMgfCBmaWx0ZXI6IHtmaXhlZDogdHJ1ZX1cIj4gXHJcbiMgXHRcdDwvZGl2PicnJ1xyXG4jIFx0cmVwbGFjZTogdHJ1ZVxyXG4jIFx0bGluazogKHNjb3BlLCBlbGVtZW50LCBhdHRycykgLT5cclxuXHJcbiMgYW5ndWxhci5tb2R1bGUoJyRhbmd1bGFyVGFibGUuZGlyZWN0aXZlcycpLmRpcmVjdGl2ZSAnYW5ndWxhclRhYmxlSGVhZGVyUmlnaHQnLCAoKSAtPlxyXG4jIFx0dGVtcGxhdGU6ICcnJzxkaXYgY2xhc3M9XCJhbmd1bGFyLXRhYmxlLWhlYWRlci1yaWdodFwiIG5nLXN0eWxlPVwie2hlaWdodDogKG9wdGlvbnMuaGVhZGVyLmhlaWdodC0xKSArICdweCcsIHdpZHRoOiAob3B0aW9ucy53aWR0aCAtIHdpZHRoTGVmdCkrJ3B4J31cIj5cclxuIyBcdFx0XHQ8ZGl2IGFuZ3VsYXItdGFibGUtaGVhZGVyLWNlbGwgbmctcmVwZWF0PVwiY29sdW1uIGluIGNvbHVtbnMgfCBmaWx0ZXI6IHtmaXhlZDogZmFsc2V9XCI+IFxyXG4jIFx0XHQ8L2Rpdj4nJydcclxuIyBcdHJlcGxhY2U6IHRydWVcclxuIyBcdGxpbms6IChzY29wZSwgZWxlbWVudCwgYXR0cnMpIC0+XHJcbiMgXHRcdHNjb3BlLiRvbiAnYWRqdXN0aHNjcm9sbCcsIChldnQsIGxlZnQpIC0+XHJcbiMgXHRcdFx0ZWxlbWVudFswXS5zY3JvbGxMZWZ0ID0gbGVmdFxyXG5cclxuIyBhbmd1bGFyLm1vZHVsZSgnJGFuZ3VsYXJUYWJsZS5kaXJlY3RpdmVzJykuZGlyZWN0aXZlICdhbmd1bGFyVGFibGVIZWFkZXJDZWxsJywgKCkgLT5cclxuIyBcdHRlbXBsYXRlOiAnJyc8ZGl2IGNsYXNzPVwiYW5ndWxhci10YWJsZS1oZWFkZXItY2VsbFwiIG5nLXN0eWxlPVwie3dpZHRoOiAoY29sdW1uLndpZHRoIHx8IDEwMCkrJ3B4J31cIj5cclxuIyBcdFx0XHQ8bGFiZWwgbmctc3R5bGU9XCJ7aGVpZ2h0OiAob3B0aW9ucy5oZWFkZXIuaGVpZ2h0LTEpKydweCcsIGxpbmVIZWlnaHQ6IChvcHRpb25zLmhlYWRlci5oZWlnaHQtMSkrJ3B4J31cIj5cclxuIyBcdFx0XHRcdHt7Y29sdW1uLmxhYmVsfX1cclxuIyBcdFx0XHQ8L2xhYmVsPlxyXG4jIFx0XHQ8L2Rpdj4nJydcclxuIyBcdHJlcGxhY2U6IHRydWVcclxuIyBcdGxpbms6IChzY29wZSwgZWxlbWVudCwgYXR0cnMpIC0+XHJcblxyXG4jIGFuZ3VsYXIubW9kdWxlKCckYW5ndWxhclRhYmxlLmRpcmVjdGl2ZXMnKS5kaXJlY3RpdmUgJ2FuZ3VsYXJUYWJsZUNvbHVtblNjcm9sbGVyJywgKCkgLT5cclxuIyBcdHRlbXBsYXRlOiAnJyc8ZGl2IGNsYXNzPVwiYW5ndWxhci10YWJsZS1jb2x1bW4tc2Nyb2xsZXJcIiBuZy1zdHlsZT1cInttYXJnaW5MZWZ0OiAod2lkdGhMZWZ0KSArICdweCcsIHdpZHRoOiAob3B0aW9ucy53aWR0aCAtIHdpZHRoTGVmdCkrJ3B4JywgaGVpZ2h0OihvcHRpb25zLmhlaWdodCAtIG9wdGlvbnMuaGVhZGVyLmhlaWdodCkgKyAncHgnfVwiPlxyXG4jIFx0XHRcdDxkaXYgbmctc3R5bGU9XCJ7d2lkdGg6IHdpZHRoUmlnaHQrJ3B4J31cIiBzdHlsZT1cImhlaWdodDogNDBweDtcIj48L2Rpdj5cclxuIyBcdFx0PC9kaXY+JycnXHJcbiMgXHRyZXBsYWNlOiB0cnVlXHJcbiMgXHRsaW5rOiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSAtPlxyXG4jIFx0XHRlbGVtZW50LmJpbmQgJ3Njcm9sbCcsIChldnQpIC0+XHJcbiMgXHRcdFx0c2NvcGUuJGVtaXQgJ2hzY3JvbGwnLCBldnQuc3JjRWxlbWVudC5zY3JvbGxMZWZ0XHJcblxyXG5cclxuIyBhbmd1bGFyLm1vZHVsZSgnJGFuZ3VsYXJUYWJsZS5kaXJlY3RpdmVzJykuZGlyZWN0aXZlICdhbmd1bGFyVGFibGVCb2R5TGVmdCcsICgpIC0+XHJcbiMgXHR0ZW1wbGF0ZTogJycnPGRpdiBjbGFzcz1cImFuZ3VsYXItdGFibGUtYm9keS1sZWZ0XCIgbmctc3R5bGU9XCJ7aGVpZ2h0OiAob3B0aW9ucy5oZWlnaHQgLSBvcHRpb25zLmhlYWRlci5oZWlnaHQgLSBzY3JvbGxiYXJXaWR0aCkgKyAncHgnfVwiPlxyXG4jIFx0XHRcdDxkaXYgY2xhc3M9XCJhbmd1bGFyLXRhYmxlLXJvd1wiIG5nLXJlcGVhdD1cInJvdyBpbiByb3dzXCI+XHJcbiMgXHRcdFx0XHQ8ZGl2IGFuZ3VsYXItdGFibGUtcm93LWNlbGwgbmctcmVwZWF0PVwiY29sdW1uIGluIGNvbHVtbnMgfCBmaWx0ZXI6IHtmaXhlZDogdHJ1ZX1cIj48L2Rpdj5cclxuIyBcdFx0XHQ8L2Rpdj5cclxuIyBcdFx0PC9kaXY+JycnXHJcbiMgXHRyZXBsYWNlOiB0cnVlXHJcbiMgXHRsaW5rOiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSAtPlxyXG4jIFx0XHRzY29wZS4kb24gJ2FkanVzdHZzY3JvbGwnLCAoZXZ0LCB0b3ApIC0+XHJcbiMgXHRcdFx0ZWxlbWVudFswXS5zY3JvbGxUb3AgPSB0b3BcclxuXHJcbiMgYW5ndWxhci5tb2R1bGUoJyRhbmd1bGFyVGFibGUuZGlyZWN0aXZlcycpLmRpcmVjdGl2ZSAnYW5ndWxhclRhYmxlQm9keVJpZ2h0JywgKCkgLT5cclxuIyBcdHRlbXBsYXRlOiAnJyc8ZGl2IGNsYXNzPVwiYW5ndWxhci10YWJsZS1ib2R5LXJpZ2h0XCIgbmctc3R5bGU9XCJ7aGVpZ2h0OiAob3B0aW9ucy5oZWlnaHQgLSBvcHRpb25zLmhlYWRlci5oZWlnaHQgLSBzY3JvbGxiYXJXaWR0aCkgKyAncHgnLCB3aWR0aDogKG9wdGlvbnMud2lkdGggLSB3aWR0aExlZnQpKydweCd9XCI+XHJcbiMgXHRcdFx0PGRpdiBjbGFzcz1cImFuZ3VsYXItdGFibGUtcm93XCIgbmctcmVwZWF0PVwicm93IGluIHJvd3NcIiBuZy1zdHlsZT1cInt3aWR0aDogKHdpZHRoUmlnaHQpKydweCd9XCI+XHJcbiMgXHRcdFx0XHQ8ZGl2IGFuZ3VsYXItdGFibGUtcm93LWNlbGwgbmctcmVwZWF0PVwiY29sdW1uIGluIGNvbHVtbnMgfCBmaWx0ZXI6IHtmaXhlZDogZmFsc2V9XCI+PC9kaXY+XHJcbiMgXHRcdFx0PC9kaXY+XHJcbiMgXHRcdDwvZGl2PicnJ1xyXG4jIFx0cmVwbGFjZTogdHJ1ZVxyXG4jIFx0bGluazogKHNjb3BlLCBlbGVtZW50LCBhdHRycykgLT5cclxuIyBcdFx0c2NvcGUuJG9uICdhZGp1c3Roc2Nyb2xsJywgKGV2dCwgbGVmdCkgLT5cclxuIyBcdFx0XHRlbGVtZW50WzBdLnNjcm9sbExlZnQgPSBsZWZ0XHJcbiMgXHRcdGVsZW1lbnQuYmluZCAnc2Nyb2xsJywgKGV2dCkgLT5cclxuIyBcdFx0XHRzY29wZS4kZW1pdCAndnNjcm9sbCcsIGV2dC5zcmNFbGVtZW50LnNjcm9sbFRvcFxyXG5cclxuIyBhbmd1bGFyLm1vZHVsZSgnJGFuZ3VsYXJUYWJsZS5kaXJlY3RpdmVzJykuZGlyZWN0aXZlICdhbmd1bGFyVGFibGVSb3dDZWxsJywgKCkgLT5cclxuIyBcdHRlbXBsYXRlOiAnJyc8ZGl2IGNsYXNzPVwiYW5ndWxhci10YWJsZS1yb3ctY2VsbFwiIG5nLXN0eWxlPVwie2hlaWdodDogKG9wdGlvbnMucm93SGVpZ2h0ICsgMSkgKyAncHgnLCB3aWR0aDogKGNvbHVtbi53aWR0aCkrJ3B4J31cIj5cclxuIyBcdFx0XHQ8c3BhbiBjbGFzcz1cImFuZ3VsYXItdGFibGUtcm93LWNlbGwtY29udGVudFwiIG5nLXN0eWxlPVwie2hlaWdodDogKG9wdGlvbnMucm93SGVpZ2h0LTEpKydweCcsIGxpbmVIZWlnaHQ6IChvcHRpb25zLnJvd0hlaWdodC0xKSsncHgnfVwiPlxyXG4jIFx0XHRcdFx0e3tyb3dbY29sdW1uLm5hbWVdfX1cclxuIyBcdFx0XHQ8L3NwYW4+XHJcbiMgXHRcdDwvZGl2PicnJ1xyXG4jIFx0cmVwbGFjZTogdHJ1ZVxyXG4jIFx0bGluazogKHNjb3BlLCBlbGVtZW50LCBhdHRycykgLT5cclxuXHJcblxyXG4iLCJhbmd1bGFyVGFibGUgPSBhbmd1bGFyLm1vZHVsZSAnJGFuZ3VsYXJUYWJsZSdcclxuXHJcbmFuZ3VsYXJUYWJsZS5kaXJlY3RpdmUgJ2FuZ3VsYXJUYWJsZUhlYWRlckNlbGwnLCAtPlxyXG5cdHRlbXBsYXRlOiAnJydcclxuXHRcdDxkaXYgY2xhc3M9XCJhbmd1bGFyLXRhYmxlLWNlbGwgYW5ndWxhci10YWJsZS1oZWFkZXItY2VsbFwiIGJpbmRvbmNlIG5nLXN0eWxlPVwie1xyXG5cdFx0XHRcdFx0d2lkdGg6IGNvbC53aWR0aCA/IChjb2wud2lkdGggKyAncHgnKSA6ICdhdXRvJyxcclxuXHRcdFx0XHRcdCdtaW4td2lkdGgnOiAoY29sLm1pbldpZHRoIHx8IDEwMCkgKyAncHgnLFxyXG5cdFx0XHRcdFx0aGVpZ2h0OiAoY29uZmlnLmhlYWRlckhlaWdodCB8fCAzMCkgKyAncHgnLFxyXG5cdFx0XHRcdFx0J2xpbmUtaGVpZ2h0JzogKGNvbmZpZy5oZWFkZXJIZWlnaHQgfHwgMzApICsgJ3B4JyxcclxuXHRcdFx0XHRcdCd0ZXh0LWFsaWduJzogKGNvbC5hbGlnbiB8fCAnY2VudGVyJylcclxuXHRcdFx0XHR9XCIgYm8tY2xhc3M9XCJ7ZmxleDogIWNvbC53aWR0aCwgcmVzaXphYmxlOiBjb2wucmVzaXphYmxlfVwiXHJcblx0XHRcdFx0bmctbW91c2Vkb3duPVwiaGVhZGVyLm1vdXNlZG93bigkZXZlbnQsIHBhcnQsICRpbmRleClcIlxyXG5cdFx0XHRcdD5cclxuXHRcdFx0PGRpdiBjbGFzcz1cImFuZ3VsYXItdGFibGUtaGVhZGVyLWNlbGwtY29udGVudFwiIGJvLXRleHQ9XCJjb2wubGFiZWxcIj48L2Rpdj5cclxuXHRcdDwvZGl2PlxyXG5cdCcnJ1xyXG5cdHJlcGxhY2U6IHRydWVcclxuXHJcbmFuZ3VsYXJUYWJsZS5kaXJlY3RpdmUgJ2FuZ3VsYXJUYWJsZUJvZHlDb2x1bW4nLCAtPlxyXG5cdHRlbXBsYXRlOiAnJydcclxuXHRcdDxkaXYgY2xhc3M9XCJhbmd1bGFyLXRhYmxlLWJvZHktY29sdW1uXCIgYmluZG9uY2Ugbmctc3R5bGU9XCJ7XHJcblx0XHRcdFx0XHR3aWR0aDogY29sLndpZHRoID8gKGNvbC53aWR0aCArICdweCcpIDogJ2F1dG8nLFxyXG5cdFx0XHRcdFx0J21pbi13aWR0aCc6IChjb2wubWluV2lkdGggfHwgMTAwKSArICdweCdcclxuXHRcdFx0XHR9XCIgYm8tY2xhc3M9XCJjb2wud2lkdGggPyAnJyA6ICdmbGV4J1wiPlxyXG5cdFx0XHQ8ZGl2IGNsYXNzPVwiYW5ndWxhci10YWJsZS1jZWxsIGFuZ3VsYXItdGFibGUtYm9keS1jZWxsXCIgYmluZG9uY2UgbmctcmVwZWF0PVwiaXRlbSBpbiBjb25maWcuZGF0YVwiXHJcblx0XHRcdFx0XHRcdGJvLWF0dHIgYm8tYXR0ci1kYXRhLWluZGV4PVwiJGluZGV4XCJcclxuXHRcdFx0XHRcdFx0Ym8tY2xhc3M9XCIkaW5kZXggPT0gc2VsZWN0ZWQgPyAnc2VsZWN0ZWQnIDogJydcIlxyXG5cdFx0XHRcdFx0PlxyXG5cdFx0XHRcdDxkaXYgYm8taWY9XCJjb2wudHlwZSE9J2FjdGlvbnMnXCIgY2xhc3M9XCJhbmd1bGFyLXRhYmxlLWJvZHktY2VsbC1jb250ZW50XCIgbmctc3R5bGU9XCJ7XHJcblx0XHRcdFx0XHRcdGhlaWdodDogKGNvbmZpZy5yb3dIZWlnaHQgfHwgMzApICsgJ3B4JyxcclxuXHRcdFx0XHRcdFx0J2xpbmUtaGVpZ2h0JzogKGNvbmZpZy5yb3dIZWlnaHQgfHwgMzApICsgJ3B4JyxcclxuXHRcdFx0XHRcdFx0J3RleHQtYWxpZ24nOiAoY29sLmFsaWduIHx8ICdjZW50ZXInKVxyXG5cdFx0XHRcdFx0fVwiXHJcblx0XHRcdFx0XHRiby10ZXh0PVwiY29sLmZvcm1hdHRlciA/IGNvbC5mb3JtYXR0ZXIoaXRlbVtjb2wuZmllbGRdKSA6IGl0ZW1bY29sLmZpZWxkXVwiPlxyXG5cdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdDxkaXYgYm8taWY9XCJjb2wudHlwZT09J2FjdGlvbnMnXCIgY2xhc3M9XCJhbmd1bGFyLXRhYmxlLWJvZHktcm93LWNlbGwtY29udGVudFwiIGJvLXN0eWxlPVwie1xyXG5cdFx0XHRcdFx0XHRoZWlnaHQ6IChjb25maWcucm93SGVpZ2h0IHx8IDMwKSArICdweCcsXHJcblx0XHRcdFx0XHRcdCdsaW5lLWhlaWdodCc6IChjb25maWcucm93SGVpZ2h0IHx8IDMwKSArICdweCcsXHJcblx0XHRcdFx0XHRcdCd0ZXh0LWFsaWduJzogKGNvbC5hbGlnbiB8fCAnY2VudGVyJylcclxuXHRcdFx0XHRcdFx0fVwiPlxyXG5cdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJpY29uXCIgYmluZG9uY2UgbmctcmVwZWF0PVwiYWN0aW9uIGluIGNvbC5hY3Rpb25zXCIgYm8tY2xhc3M9XCJhY3Rpb24uaWNvbkNsYXNzXCIpXHJcblx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0PC9kaXY+XHJcblx0JycnXHJcblx0cmVwbGFjZTogdHJ1ZVxyXG5cclxuYW5ndWxhclRhYmxlLmRpcmVjdGl2ZSAnYW5ndWxhclRhYmxlJywgW1xyXG5cdCckdGltZW91dCcsXHJcblx0KCR0aW1lb3V0KSAtPlxyXG5cdFx0dGVtcGxhdGU6ICcnJzxkaXYgY2xhc3M9XCJhbmd1bGFyLXRhYmxlXCI+XHJcblx0XHRcdFx0PGRpdiBjbGFzcz1cImFuZ3VsYXItdGFibGUtaGVhZGVyXCIgYmluZG9uY2U9XCJjb25maWdcIiBuZy1zdHlsZT1cIntcclxuXHRcdFx0XHRcdFx0XHRoZWlnaHQ6IChjb25maWcuaGVhZGVySGVpZ2h0IHx8IDMwKSArICdweCcsXHJcblx0XHRcdFx0XHRcdFx0J2xpbmUtaGVpZ2h0JzogKGNvbmZpZy5oZWFkZXJIZWlnaHQgfHwgMzApICsgJ3B4J1xyXG5cdFx0XHRcdFx0XHR9XCI+XHJcblx0XHRcdFx0XHQ8ZGl2IGJvLWNsYXNzPVwiJ2FuZ3VsYXItdGFibGUtaGVhZGVyLScgKyBwYXJ0XCIgYmluZG9uY2UgbmctcmVwZWF0PVwicGFydCBpbiBbJ2xlZnQnLCAnY2VudGVyJywgJ3JpZ2h0J11cIj5cclxuXHRcdFx0XHRcdFx0PGRpdiBhbmd1bGFyLXRhYmxlLWhlYWRlci1jZWxsIG5nLXJlcGVhdD1cImNvbCBpbiBjb25maWcuY29sdW1uc1twYXJ0XVwiPjwvZGl2PlxyXG5cdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0PC9kaXY+XHJcblxyXG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJhbmd1bGFyLXRhYmxlLWJvZHlcIj5cclxuXHRcdFx0XHRcdDxkaXYgYm8tY2xhc3M9XCInYW5ndWxhci10YWJsZS1ib2R5LScgKyBwYXJ0XCIgYmluZG9uY2UgbmctcmVwZWF0PVwicGFydCBpbiBbJ2xlZnQnLCAnY2VudGVyJywgJ3JpZ2h0J11cIj5cclxuXHRcdFx0XHRcdFx0PGRpdiBhbmd1bGFyLXRhYmxlLWJvZHktY29sdW1uIG5nLXJlcGVhdD1cImNvbCBpbiBjb25maWcuY29sdW1uc1twYXJ0XVwiPjwvZGl2PlxyXG5cdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdDwvZGl2PicnJ1xyXG5cdFx0cmVwbGFjZTogdHJ1ZVxyXG5cdFx0c2NvcGU6XHJcblx0XHRcdGNvbmZpZzogJz1hbmd1bGFyVGFibGUnXHJcblx0XHRsaW5rOiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSAtPlxyXG5cdFx0XHQkdGltZW91dCAtPlxyXG5cdFx0XHRcdFx0ZWxlbWVudC5vbiAnbW91c2VlbnRlcicsICcuYW5ndWxhci10YWJsZS1ib2R5LWNlbGwnLCAtPlxyXG5cdFx0XHRcdFx0XHRpbmRleCA9ICQodGhpcykuZGF0YSAnaW5kZXgnXHJcblx0XHRcdFx0XHRcdGVsZW1lbnQuZmluZChcIi5hbmd1bGFyLXRhYmxlLWJvZHktY2VsbFtkYXRhLWluZGV4PSN7aW5kZXh9XVwiKS5hZGRDbGFzcyAnaG92ZXInXHJcblx0XHRcdFx0XHRlbGVtZW50Lm9uICdtb3VzZWxlYXZlJywgJy5hbmd1bGFyLXRhYmxlLWJvZHktY2VsbCcsIC0+XHJcblx0XHRcdFx0XHRcdGluZGV4ID0gJCh0aGlzKS5kYXRhICdpbmRleCdcclxuXHRcdFx0XHRcdFx0ZWxlbWVudC5maW5kKFwiLmFuZ3VsYXItdGFibGUtYm9keS1jZWxsW2RhdGEtaW5kZXg9I3tpbmRleH1dXCIpLnJlbW92ZUNsYXNzICdob3ZlcidcclxuXHRcdFx0XHRcdCMgZWxlbWVudC5vbiAnY2xpY2snLCAnLmFuZ3VsYXItdGFibGUtYm9keS1jZWxsJywgLT5cclxuXHRcdFx0XHRcdCMgXHRpbmRleCA9ICQodGhpcykuZGF0YSAnaW5kZXgnXHJcblx0XHRcdFx0XHQjIFx0ZWxlbWVudC5maW5kKFwiLmFuZ3VsYXItdGFibGUtYm9keS1jZWxsW2RhdGEtaW5kZXg9I3tzY29wZS5zZWxlY3RlZH1dXCIpLnJlbW92ZUNsYXNzICdzZWxlY3RlZCdcclxuXHRcdFx0XHRcdCMgXHRpZiBzY29wZS5zZWxlY3RlZCAhPSBpbmRleFxyXG5cdFx0XHRcdFx0IyBcdFx0c2NvcGUuc2VsZWN0ZWQgPSBpbmRleFxyXG5cdFx0XHRcdFx0IyBcdFx0ZWxlbWVudC5maW5kKFwiLmFuZ3VsYXItdGFibGUtYm9keS1jZWxsW2RhdGEtaW5kZXg9I3tpbmRleH1dXCIpLmFkZENsYXNzICdzZWxlY3RlZCdcclxuXHRcdFx0XHRcdCMgXHRlbHNlXHJcblx0XHRcdFx0XHQjIFx0XHRzY29wZS5zZWxlY3RlZCA9IC0xXHJcblxyXG5cdFx0XHRcdFx0aGVhZGVyQ2VudGVyID0gZWxlbWVudC5maW5kICcuYW5ndWxhci10YWJsZS1oZWFkZXItY2VudGVyJ1xyXG5cdFx0XHRcdFx0Ym9keUNlbnRlciA9IGVsZW1lbnQuZmluZCAnLmFuZ3VsYXItdGFibGUtYm9keS1jZW50ZXInXHJcblx0XHRcdFx0XHRib2R5Q2VudGVyLnBlcmZlY3RTY3JvbGxiYXIoKVxyXG5cdFx0XHRcdFx0XHQuc2Nyb2xsIChldmVudCkgLT5cclxuXHRcdFx0XHRcdFx0XHRzaWJsaW5ncyA9ICQodGhpcykuc2libGluZ3MoKVxyXG5cdFx0XHRcdFx0XHRcdHNpYmxpbmdzLnNjcm9sbFRvcCAkKHRoaXMpLnNjcm9sbFRvcCgpXHJcblx0XHRcdFx0XHRcdFx0aGVhZGVyQ2VudGVyLnNjcm9sbExlZnQgJCh0aGlzKS5zY3JvbGxMZWZ0KClcclxuXHRcdFx0XHQsIDBcclxuXHJcblx0XHRcdHJlc2l6aW5nID0gbnVsbFxyXG5cclxuXHRcdFx0c2NvcGUuc2VsZWN0ZWQgPSAtMVxyXG5cclxuXHRcdFx0c2NvcGUuJG9uICdyZXNpemluZycsIChfZXZlbnQsIHJlc2l6aW5nKSAtPlxyXG5cclxuXHRcdFx0XHRvbm1vdXNlbW92ZSA9IChldmVudCkgLT5cclxuXHRcdFx0XHRcdG5ld1dpZHRoID0gcmVzaXppbmcud2lkdGggLSByZXNpemluZy5zdGFydCArIGV2ZW50LnNjcmVlblhcclxuXHRcdFx0XHRcdG5ld1dpZHRoID0gMzAgaWYgbmV3V2lkdGggPCAzMFxyXG5cdFx0XHRcdFx0cmVzaXppbmcuZWxlbWVudC5vdXRlcldpZHRoIG5ld1dpZHRoXHJcblxyXG5cdFx0XHRcdCQod2luZG93KS5vbiAnbW91c2Vtb3ZlJywgb25tb3VzZW1vdmVcclxuXHJcblx0XHRcdFx0JCh3aW5kb3cpLm9uZSAnbW91c2V1cCcsIChldmVudCkgLT5cclxuXHRcdFx0XHRcdHJlc2l6aW5nLmVsZW1lbnQucmVtb3ZlQ2xhc3MgJ3Jlc2l6aW5nJ1xyXG5cclxuXHRcdFx0XHRcdCQod2luZG93KS5vZmYgJ21vdXNlbW92ZScsIG9ubW91c2Vtb3ZlXHJcblx0XHRcdFx0XHRuZXdXaWR0aCA9IHJlc2l6aW5nLndpZHRoIC0gcmVzaXppbmcuc3RhcnQgKyBldmVudC5zY3JlZW5YXHJcblx0XHRcdFx0XHRuZXdXaWR0aCA9IDMwIGlmIG5ld1dpZHRoIDwgMzBcclxuXHRcdFx0XHRcdGNvbCA9IGFuZ3VsYXIuY29weSBzY29wZS5jb25maWcuY29sdW1uc1tyZXNpemluZy5wYXJ0XVtyZXNpemluZy5pbmRleF1cclxuXHRcdFx0XHRcdGNvbC53aWR0aCA9IG5ld1dpZHRoXHJcblx0XHRcdFx0XHRzY29wZS5jb25maWcuY29sdW1uc1tyZXNpemluZy5wYXJ0XVtyZXNpemluZy5pbmRleF0gPSBjb2xcclxuXHRcdFx0XHRcdCR0aW1lb3V0IC0+XHJcblx0XHRcdFx0XHRcdHNjb3BlLiRkaWdlc3QoKVxyXG5cclxuXHRcdFx0c2NvcGUuaGVhZGVyID1cclxuXHRcdFx0XHRtb3VzZWRvd246IChldmVudCwgcGFydCwgaW5kZXgpIC0+XHJcblx0XHRcdFx0XHRlbGVtZW50ID0gJChldmVudC50YXJnZXQpXHJcblx0XHRcdFx0XHRpZiAhc2NvcGUuY29uZmlnLmNvbHVtbnNbcGFydF1baW5kZXhdLnJlc2l6YWJsZSBvciBlbGVtZW50LmlzKCcuYW5ndWxhci10YWJsZS1oZWFkZXItY2VsbC1jb250ZW50Jykgb3IgcGFydCA9PSAncmlnaHQnIGFuZCBpbmRleCA9PSBzY29wZS5jb25maWcuY29sdW1uc1twYXJ0XS5sZW5ndGggLSAxXHJcblx0XHRcdFx0XHRcdHJldHVyblxyXG5cdFx0XHRcdFx0cmVzaXppbmcgPVxyXG5cdFx0XHRcdFx0XHRwYXJ0OiBwYXJ0XHJcblx0XHRcdFx0XHRcdGluZGV4OiBpbmRleFxyXG5cdFx0XHRcdFx0XHRzdGFydDogZXZlbnQuc2NyZWVuWFxyXG5cdFx0XHRcdFx0XHRlbGVtZW50OiBlbGVtZW50XHJcblx0XHRcdFx0XHRcdHdpZHRoOiBlbGVtZW50Lm91dGVyV2lkdGgoKVxyXG5cdFx0XHRcdFx0ZWxlbWVudC5hZGRDbGFzcyAncmVzaXppbmcnXHJcblx0XHRcdFx0XHRzY29wZS4kYnJvYWRjYXN0ICdyZXNpemluZycsIHJlc2l6aW5nXHJcbl0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=