(function() {
  angular.module('$angularTable', ['pasvaz.bindonce']);

}).call(this);

(function() {
  var angularTable;

  angularTable = angular.module('$angularTable');

  angularTable.directive('angularTable', function() {
    return {
      template: '<div class="angular-table">\n	<div class="angular-table-header" bindonce="config" bo-style="{\n				height: (config.headerHeight || 30) + \'px\',\n				\'line-height\': (config.headerHeight || 30) + \'px\'\n			}">\n		<div class="angular-table-cell angular-table-header-cell" bindonce ng-repeat="col in config.columns | filter:{sticky: \'left\'}" bo-style="{\n					width: col.width ? (col.width + \'px\') : \'auto\',\n					\'min-width\': (col.minWidth || 100) + \'px\',\n					height: (config.headerHeight || 30) + \'px\',\n					\'line-height\': (config.headerHeight || 30) + \'px\',\n					\'text-align\': (col.align || \'center\')\n				}" bo-text="col.label">\n		</div>\n		<div class="flex angular-table-header-center">\n			<div class="angular-table-cell angular-table-header-cell" bindonce ng-repeat="col in config.columns | filter:{sticky: undefined}" bo-style="{\n						width: col.width ? (col.width + \'px\') : \'auto\',\n						\'min-width\': (col.minWidth || 100) + \'px\',\n						height: (config.headerHeight || 30) + \'px\',\n						\'line-height\': (config.headerHeight || 30) + \'px\',\n						\'text-align\': (col.align || \'center\')\n					}" bo-text="col.label">\n			</div>\n		</div>\n		<div class="angular-table-cell angular-table-header-cell" bindonce ng-repeat="col in config.columns | filter:{sticky: \'right\'}" bo-style="{\n					width: col.width ? (col.width + \'px\') : \'auto\',\n					\'min-width\': (col.minWidth || 100) + \'px\',\n					height: (config.headerHeight || 30) + \'px\',\n					\'line-height\': (config.headerHeight || 30) + \'px\',\n					\'text-align\': (col.align || \'center\')\n				}" bo-text="col.label">\n		</div>\n	</div>\n\n	<div class="angular-table-body">\n		<div class="angular-table-body-left" bindonce ng-repeat="col in config.columns | filter:{sticky: \'left\'}" bo-style="{\n					width: col.width ? (col.width + \'px\') : \'auto\',\n					\'min-width\': (col.minWidth || 100) + \'px\'\n				}">\n			<div class="angular-table-cell angular-table-body-row-cell" bindonce ng-repeat="item in config.data">\n				<div class="angular-table-body-row-cell-content" bo-style="{\n						height: (config.rowHeight || 30) + \'px\',\n						\'line-height\': (config.rowHeight || 30) + \'px\',\n						\'text-align\': (col.align || \'center\')\n					}"\n					bo-text="col.formatter ? col.formatter(item[col.field]) : item[col.field]">\n				</div>\n			</div>\n		</div>\n		<div class="angular-table-body-center">\n			<div bindonce ng-repeat="col in config.columns | filter:{sticky: undefined}" bo-style="{\n						width: col.width ? (col.width + \'px\') : \'auto\',\n						\'min-width\': (col.minWidth || 100) + \'px\'\n					}" bo-class="col.width ? \'\' : \'flex\'">\n				<div class="angular-table-cell angular-table-body-row-cell" bindonce ng-repeat="item in config.data">\n					<div class="angular-table-body-row-cell-content" bo-style="{\n							height: (config.rowHeight || 30) + \'px\',\n							\'line-height\': (config.rowHeight || 30) + \'px\',\n							\'text-align\': (col.align || \'center\')\n							}"\n						bo-text="col.formatter ? col.formatter(item[col.field]) : item[col.field]">\n					</div>\n				</div>\n			</div>\n		</div>\n		<div class="angular-table-body-right" bindonce ng-repeat="col in config.columns | filter:{sticky: \'right\'}" bo-style="{\n					width: col.width ? (col.width + \'px\') : \'auto\',\n					\'min-width\': (col.minWidth || 100) + \'px\'\n				}">\n			<div class="angular-table-cell angular-table-body-row-cell" bindonce ng-repeat="item in config.data">\n				<div bo-if="col.type!=\'actions\'" class="angular-table-body-row-cell-content" bo-style="{\n						height: (config.rowHeight || 30) + \'px\',\n						\'line-height\': (config.rowHeight || 30) + \'px\',\n						\'text-align\': (col.align || \'center\')\n						}"\n					bo-text="col.formatter ? col.formatter(item[col.field]) : item[col.field]">\n				</div>\n				<div bo-if="col.type==\'actions\'" class="angular-table-body-row-cell-content" bo-style="{\n						height: (config.rowHeight || 30) + \'px\',\n						\'line-height\': (config.rowHeight || 30) + \'px\',\n						\'text-align\': (col.align || \'center\')\n						}">\n					<span class="icon" bindonce ng-repeat="action in col.actions" bo-class="action.iconClass")\n				</div>\n			</div>\n		</div>\n	</div>\n</div>',
      replace: true,
      scope: {
        config: '=angularTable'
      },
      link: function(scope, element, attrs) {
        var bodyCenter, headerCenter;
        headerCenter = element.find('.angular-table-header-center');
        bodyCenter = element.find('.angular-table-body-center');
        return bodyCenter.perfectScrollbar().scroll(function(evt) {
          return headerCenter.scrollLeft($(this).scrollLeft());
        });
      }
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,