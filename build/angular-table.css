.angular-table {
  overflow-x: hidden;
  overflow-y: hidden;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: -ms-flex;
  display: flex;
  -webkit-flex-direction: column;
  -moz-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}
.angular-table-header {
  border-bottom: 2px solid #eee;
  overflow: hidden;
  font-weight: bold;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: -ms-flex;
  display: flex;
}
.angular-table-header-center {
  overflow: hidden;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: -ms-flex;
  display: flex;
  border-right: 1px solid #eee;
}
.angular-table-body-left,
.angular-table-body-right {
  overflow: hidden;
}
.angular-table-body-center {
  overflow: hidden;
  -webkit-flex: 1;
  -moz-flex: 1;
  -ms-flex: 1;
  flex: 1;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: -ms-flex;
  display: flex;
  position: relative;
  border-right: 1px solid #eee;
}
.angular-table-cell {
  padding: 0 8px;
  border-right: 1px solid #eee;
  overflow: hidden;
}
.angular-table-cell.flex {
  -webkit-flex: 1;
  -moz-flex: 1;
  -ms-flex: 1;
  flex: 1;
}
.angular-table-cell .icon {
  opacity: 0.5;
  margin: 2px;
}
.angular-table-cell .icon:hover {
  opacity: 0.8;
}
.angular-table-body {
  -webkit-flex: 1;
  -moz-flex: 1;
  -ms-flex: 1;
  flex: 1;
  overflow: hidden;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: -ms-flex;
  display: flex;
}
.angular-table-body-row {
  white-space: nowrap;
  overflow: visible;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: -ms-flex;
  display: flex;
}
.angular-table-body-row-cell {
  border-bottom: 1px solid #eee;
}

/*# sourceMappingURL=data:application/json;base64, */