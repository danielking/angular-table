.angular-table {
  overflow-x: hidden;
  overflow-y: hidden;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-box;
  display: box;
  -webkit-box-orient: vertical;
  -moz-box-orient: vertical;
  -ms-box-orient: vertical;
  box-orient: vertical;
}
.angular-table-header {
  white-space: nowrap;
  border-bottom: 2px solid #eee;
  overflow: hidden;
  font-weight: bold;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-box;
  display: box;
  -webkit-box-orient: horizontal;
  -moz-box-orient: horizontal;
  -ms-box-orient: horizontal;
  box-orient: horizontal;
}
.angular-table-cell {
  padding: 0 8px;
  border-right: 1px solid #eee;
  overflow: hidden;
}
.angular-table-cell:nth-last-child(1) {
  border-right: 0;
}
.angular-table-cell.flex {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -ms-box-flex: 1;
  box-flex: 1;
}
.angular-table-body {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -ms-box-flex: 1;
  box-flex: 1;
  position: relative;
  overflow: hidden;
}
.angular-table-body-row {
  white-space: nowrap;
  overflow: visible;
  border-bottom: 1px solid #eee;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-box;
  display: box;
  -webkit-box-orient: horizontal;
  -moz-box-orient: horizontal;
  -ms-box-orient: horizontal;
  box-orient: horizontal;
}

/*# sourceMappingURL=data:application/json;base64, */